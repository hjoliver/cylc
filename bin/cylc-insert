#!/usr/bin/env python

# THIS FILE IS PART OF THE CYLC SUITE ENGINE.
# Copyright (C) 2008-2015 NIWA
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
if '--use-ssh' in sys.argv[1:]:
    sys.argv.remove( '--use-ssh' )
    from cylc.remote import remrun
    if remrun().execute( force_required=True ):
        sys.exit(0)

from cylc.prompt import prompt
from cylc import cylc_pyro_client
from cylc.CylcOptionParsers import cop, multitask_usage
from cylc.command_prep import prep_pyro
import cylc.flags

parser = cop( """cylc [control] insert [OPTIONS] ARGS

Insert task proxies into a running suite. Uses of insertion include:
 1) insert a task that was excluded by the suite definition at start-up.
 2) reinstate a task that was previously removed from a running suite.
 3) re-run an old task that cannot be retriggered because its task proxy
 is no longer live in the a suite.

Be aware that inserted cycling tasks keep on cycling as normal, even if
another instance of the same task exists at a later cycle (instances of
the same task at different cycles can coexist, but a newly spawned task
will not be added to the pool if it catches up to another task with the
same ID).

See also 'cylc submit', for running tasks without the scheduler.
""" + multitask_usage, pyro=True, multitask=True,
    argdoc=[("REG", "Suite name"),
        ('MATCH', 'Task or family name matching regular expression'),
        ('CYCLE_POINT', 'Cycle point (e.g. date-time or integer)'),
        ('[STOP_POINT]', 'Optional stop cycle point for inserted task.' )])

parser.add_option("-s", "--state", metavar="STATE",
    help="Initial state of the inserted task(s). The default is 'waiting'",
    action="store", dest="initial_state")

(options, args) = parser.parse_args()

suite, pphrase = prep_pyro( args[0], options ).execute()

name = args[1]
point_string = args[2]
if len(args) == 4:
    stop_point_string = args[3]
else:
    stop_point_string = None

try:
    proxy = cylc_pyro_client.client( suite, pphrase, options.owner,
            options.host, options.pyro_timeout,
            options.port ).get_proxy( 'command-interface' )
    prompt( 'Insert ' + name + ' at ' + point_string + ' in ' + suite,
            options.force )
    result = proxy.put(
        'insert task', name, point_string, options.is_family,
        stop_point_string, options.initial_state)
except Exception, x:
    if cylc.flags.debug:
        raise
    raise SystemExit(x)

if result[0]:
    print result[1]
else:
    sys.exit( result[1] )
